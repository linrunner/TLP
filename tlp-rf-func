#!/bin/sh
# tlp - rf switch functions
#
# Copyright (c) 2014 Thomas Koch <linrunner at gmx.net>
# This software is licensed under the GPL v2 or later.

# ----------------------------------------------------------------------------
# Constants

readonly RFKILL="rfkill"
readonly RFKD="/dev/rfkill"

readonly ALLDEV="bluetooth wifi wwan"


# ----------------------------------------------------------------------------
# Functions

get_devc () { # get control device for radio type -- $1: rftype; retval $devc
    local i

    check_sysfs "get_devc" "/sys/class/rfkill"

    devc=""
    devs=254
    rfkdev="1"
    devon="1"
    devoff="0"

    case $1 in
        wwan|bluetooth)
            for i in /sys/class/rfkill/rfkill* ; do
                if [ -f $i/type ] && [ "$(cat $i/type)" = "$1" ]; then
                    devc="$i/state"
                    echo_debug "rf" "get_devc($1) = $devc"
                    return 0
                fi
            done
            ;;

        wifi)
            for i in /sys/bus/pci/drivers/ipw2?00/*/rf_kill; do
                if [ -f $i ]; then
                    devc="$i"
                    rfkdev="0"
                    devon="0"
                    devoff="1"
                    echo_debug "rf" "get_devc($1) = $devc"
                    return 0
                fi
            done

            for i in /sys/class/rfkill/rfkill* ; do
                if [ -f $i/type ] && [ "$(cat $i/type)" = "wlan" ]; then
                    devc="$i/state"
                    echo_debug "rf" "get_devc($1) = $devc"
                    return 0
                fi
            done
            ;;

        *)
            echo "Error: unknown device type \"$1\"" 1>&2
            echo_debug "rf" "get_devc($1).unknown_type"
            return 0
            ;;
    esac

    echo_debug "rf" "get_devc($1).not_present"

    return 0
}

err_no_root_priv () { # check root privilege
    echo "Error: missing root privilege." 1>&2
    echo_debug "rf" "$1.missing_root_privilege"

    return 0
}

get_devs () { # get radio device state -- $1: rftype; retval $devs: 0=off/1=on
    if [ -n "$devc" ]; then
        devs=$(cat $devc)
        [ "$rfkdev" = "0" ] && devs=$(($devs ^ $devoff))
    fi

    echo_debug "rf" "get_devs($1) = $devs"

    return 0
}

test_rfkill_perms () { # test if either root priv or rfkill device writable
    test_root || [ -w $RFKD ]
}

device_state () { # get radio type state -- $1: rftype; retval $devc, $devs: 0=off/1=on
    echo_debug "rf" "device_state($1)"

    get_devc $1
    get_devs $1
}

device_on () { # enable radio type -- $1: rftype
    echo_debug "rf" "device_on($1)"

    get_devc $1

    # quit if no device
    [ -z "$devc" ] && return 0

    get_devs $1
    [ "$devs" = "1" ] && return 0 # quit if device is already on

    if [ "$1" = "wifi" ] && cmd_exists $NMCLI ; then
        # use nmcli to switch wifi on
        $NMCLI nm wifi on > /dev/null 2>&1
        echo_debug "rf" "device_on($1).nmcli"

        get_devs $1
        [ "$devs" = "1" ] && return 0 # quit if device is now on
    fi

    if [ "$rfkdev" = "1" ] && cmd_exists $RFKILL ; then
        if test_rfkill_perms ; then
            echo_debug "rf" "device_on($1).rfkill"
            $RFKILL unblock $1 > /dev/null 2>&1
        else
            err_no_root_priv "device_on($1).rfkill"
        fi
    else
        if test_root ; then
            echo_debug "rf" "device_on($1).devc"
            echo -n $devon > $devc
        else
            err_no_root_priv "device_on($1).devc"
        fi
    fi

    get_devs $1

    return 0
}

device_off () { # disable radio type -- $1: rftype
    echo_debug "rf" "device_off($1)"

    get_devc $1

    # quit if no device
    [ -z "$devc" ] && return 0

    get_devs $1
    [ "$devs" = "0" ] && return 0 # quit if device is already off

    if [ "$1" = "wifi" ] && cmd_exists $NMCLI ; then
        # use nmcli to switch wifi off
        $NMCLI nm wifi off > /dev/null 2>&1
        echo_debug "rf" "device_off($1).nmcli"

        get_devs $1
        [ "$devs" = "0" ] && return 0 # quit if device is now off
    fi

    if [ "$rfkdev" = "1" ] && cmd_exists $RFKILL ; then
        if test_rfkill_perms ; then
            echo_debug "rf" "device_off($1).rfkill"
            $RFKILL block $1 > /dev/null 2>&1
        else
            err_no_root_priv "device_off($1).rfkill"
        fi
    else
        if test_root ; then
            echo_debug "rf" "device_off($1).devc"
            echo -n $devoff > $devc
        else
            err_no_root_priv "device_off($1).devc"
        fi
    fi

    get_devs $1

    return 0
}

device_toggle () { # toggle radio type state -- $1: rftype
    echo_debug "rf" "device_toggle($1)"

    get_devc $1

    # quit if no device
    [ -z "$devc" ] && return 0

    get_devs $1

    if [ "$1" = "wifi" ] && cmd_exists $NMCLI ; then
        # use nmcli to toggle wifi
        local olds=$devs

        case $devs in
            0) $NMCLI nm wifi on  > /dev/null 2>&1 ;;
            1) $NMCLI nm wifi off > /dev/null 2>&1 ;;
            *) ;;
        esac
        echo_debug "rf" "device_toggle($1).nmcli"

        get_devs $1
        [ "$devs" != "$olds" ] && return 0 # quit if device is now toggled
    fi

    if [ "$rfkdev" = "1" ] && cmd_exists $RFKILL ; then
        if test_rfkill_perms ; then
            echo_debug "rf" "device_toggle($1).rfkill"
            case $devs in
                0) $RFKILL unblock $1 > /dev/null 2>&1 ;;
                1) $RFKILL block $1   > /dev/null 2>&1 ;;
                *) ;;
            esac
        else
            err_no_root_priv "device_toogle($1).rfkill"
        fi
    else
        if test_root ; then
            echo_debug "rf" "device_toggle($1).devc"
            case $devs in
                0) echo -n $devon > $devc ;;
                1) echo -n $devoff > $devc ;;
                *) ;;
            esac
        else
            err_no_root_priv "device_toogle($1).devc"
        fi
    fi

    get_devs $1

    return 0
}

device_set_state () { # set radio type state -- $1: rftype, $2: state 0=off/1=on
    echo_debug "rf" "device_set_state($1, $2)"

    get_devc $1

    # quit if no device
    [ -z "$devc" ] && return 0

    # quit if state not 0 nor 1
    [ "$2" = "0" ] || [ "$2" = "1" ] || return 0

    get_devs $1

    if [ "$1" = "wifi" ] && cmd_exists $NMCLI ; then
        # use nmcli to set wifi state
        local olds=$devs

        case $2 in
            0) $NMCLI nm wifi off > /dev/null 2>&1 ;;
            1) $NMCLI nm wifi on  > /dev/null 2>&1 ;;
            *) ;;
        esac
        echo_debug "rf" "device_set_state($1).nmcli"

        get_devs $1
        [ "$devs" != "$olds" ] && return 0 # quit if device state is now set
    fi

    if [ "$rfkdev" = "1" ] && cmd_exists $RFKILL ; then
        if test_rfkill_perms ; then
            echo_debug "rf" "device_set_state($1, $2).rfkill"
            case $2 in
                0) $RFKILL block $1   > /dev/null 2>&1 ;;
                1) $RFKILL unblock $1 > /dev/null 2>&1 ;;
            esac
        else
            err_no_root_priv "device_set_state($1).rfkill"
        fi
    else
        if test_root ; then
            echo_debug "rf" "device_set_state($1, $2).devc"
            case $2 in
                0) echo -n $devoff > $devc ;;
                1) echo -n $devon > $devc ;;
            esac
        else
            err_no_root_priv "device_set_state($1, $2).devc"
        fi
    fi

    get_devs $1

    return 0
}

echo_device_state () { # print radio type state -- $1: rftype, $2: state
    case $1 in
        bluetooth)
            devstr="bluetooth"
            ;;

        wifi)
            devstr="wifi     "
            ;;

        wwan)
            devstr="wwan     "
            ;;

        *)
            devstr=$1
            ;;
    esac

    case $2 in
        0)
            echo "$devstr = off (software)"
            ;;

        1)
            echo "$devstr = on"
            ;;

        2)
            echo "$devstr = off (hardware)"
            ;;

        254)
            echo "$devstr = none (no device)"
            ;;

        *)
            echo "$devstr = unknown state \"$state\""
    esac

    return 0
}

save_device_states () { # save radio states  -- $1: list of rftypes
    local dev
    local devlist="${1:-$ALLDEV}" # when arg empty -> use all

    echo_debug "rf" "save_device_states($devlist)"

    # create empty state file
    mkdir -p $STATEDIR 2> /dev/null 1>&2
    : > $RFSTATEFILE

    # iterate over all possible devices -> save state in file
    for dev in $devlist; do
        device_state $dev
        echo "$dev $devs" >> $RFSTATEFILE
    done

    return 0
}

restore_device_states () { # restore radio type states
    local sline

    echo_debug "rf" "restore_device_states"

    if [ -f $RFSTATEFILE ]; then
        # read state file
        while read sline; do
            set -- $sline # read dev, state into $1, $2
            device_set_state $1 $2
        done < $RFSTATEFILE

        return 0
    else
        return 1
    fi
}

init_radio_devices () { # initialize all radio type states
    # $1: start/stop/radiosw
    # called from init scripts

    local dev devs2disable devs2enable restore

    # save/restore mode is disabled by default
    if [ "$1" != "radiosw" ]; then
        restore=${RESTORE_DEVICE_STATE_ON_STARTUP:-0}
    else
        restore=0
    fi

    echo_debug "rf" "init_radio_devices($1): restore=$restore"

    if [ "$restore" = "1" ]; then
        # "save/restore" mode
        case $1 in
            start)
                restore_device_states
                if [ $? = 0 ]; then
                    echo "Radio device states restored."
                else
                    echo "No saved radio device states found."
                fi
                ;;

            stop)
                save_device_states
                echo "Radio device states saved."
                ;;
        esac
    else
        # "disable/enable on startup/shutdown" or "radiosw" mode
        case $1 in
            start)
                devs2disable="$DEVICES_TO_DISABLE_ON_STARTUP"
                devs2enable="$DEVICES_TO_ENABLE_ON_STARTUP"
                ;;

            stop)
                devs2disable="$DEVICES_TO_DISABLE_ON_SHUTDOWN"
                devs2enable="$DEVICES_TO_ENABLE_ON_SHUTDOWN"

                # NM workaround: when not explicitly configured,
                # re-enable wifi on shutdown to prepare for startup
                if ! wordinlist "wifi" "$devs2disable $devs2enable"; then
                    devs2enable="wifi $devs2enable"
                fi
                ;;

            radiosw)
                devs2disable=""
                devs2enable="$DEVICES_TO_ENABLE_ON_RADIOSW"
                ;;
        esac

        # Disable configured radios
        if [ -n "$devs2disable" ]; then
            echo -n "Disabling radios:"
            for dev in $devs2disable; do
                echo -n " $dev"
                device_off $dev
            done
            echo "."
        fi

        # Enable configured radios
        if [ -n "$devs2enable" ]; then
            if [ "$1" = "radiosw" ]; then
                # radiosw mode: disable radios not listed
                for dev in bluetooth wifi wwan; do
                    if ! wordinlist "$dev" "$devs2enable"; then
                        device_off $dev
                    fi
                done
            else
                # start mode: enable listed radios
                echo -n "Enabling radios:"
                for dev in $devs2enable; do
                    echo -n " $dev"
                    device_on $dev
                done
                echo "."
            fi
        fi

        # clean up: discard state file
        rm -f $RFSTATEFILE 2> /dev/null
    fi

    return 0
}

set_radio_devices () { # set radio devices -- $1: 0=ac mode, 1=battery mode
    local enable disable dev

    if [ "$1" = "1" ]; then
        enable=""
        disable="${DEVICES_TO_DISABLE_ON_BAT:-}"
        for dev in ${DEVICES_TO_DISABLE_ON_BAT_NOT_IN_USE:-}; do
            case $dev in
                wifi)
                    any_wifi_in_use || wordinlist wifi "$disable" || disable="wifi $disable"
                    ;;
                bluetooth)
                    any_bluetooth_in_use || wordinlist bluetooth "$disable" || disable="bluetooth $disable"
                    ;;
            esac
        done
        disable="${disable# }"
    else
        enable="${DEVICES_TO_ENABLE_ON_AC:-}"
        disable=""
    fi

    echo_debug "rf" "set_radio_devices($1): enable=$enable"
    for dev in $enable; do
        device_on $dev
    done

    echo_debug "rf" "set_radio_devices($1): disable=$disable"
    for dev in $disable; do
        device_off $dev
    done
}
