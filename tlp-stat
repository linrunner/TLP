#!/bin/sh
# tlp - display power save and usb autosuspend status
#
# Copyright (c) 2014 Thomas Koch <linrunner at gmx.net>
# This software is licensed under the GPL v2 or later.

# --- Constants

readonly LIBDIRS="/usr/lib/tlp-pm /usr/lib64/tlp-pm"
readonly LIBS="tlp-functions tlp-rf-func"

readonly TLPUSB=tlp-usblist
readonly TLPPCI=tlp-pcilist

readonly SMARTCTL=smartctl
readonly LSBREL=lsb_release

readonly ASPM=/sys/module/pcie_aspm/parameters/policy
readonly NMIWD=/proc/sys/kernel/nmi_watchdog

readonly IBMTHERMAL=/proc/acpi/ibm/thermal
readonly CORETEMP_DIRS='\
/sys/devices/platform/coretemp.0 \
/sys/devices/platform/coretemp.0/hwmon/hwmon*'
readonly IBMFAN=/proc/acpi/ibm/fan
readonly HWMONFAN_DIRS='\
/sys/class/hwmon/hwmon*/device \
/sys/class/hwmon/hwmon*'

readonly JOURNALCTL=journalctl
readonly DEBUGLOG=/var/log/debug

# --- Variables

nodebug=1

needs_root_priv=
show_all=1
show_bat=0
show_conf=0
show_rfkill=0
show_temp=0
show_trace=0
show_warn=0

# --- Functions

printparm () { # formatted output of sysfile - general
    # $1: format, $2: sysfile, $3: namsg, $4: cutoff
    local format="$1"
    local sysf="$2"    local namsg="$3"
    local cutoff="$4"
    local val=""

    if [ -f $sysf ]; then
        # sysfile exists
        val=$(cat $sysf 2> /dev/null)
        if [ $? = 0 ]; then
            # sysfile read successful
            if [ -n "$cutoff" ]; then
                val=${val%$cutoff}
            fi
        fi
    fi

    if [ -z "$val" ]; then
        # replace empty value with n/a text
        if [ -n "$namsg" ]; then
            format=$( echo $format | sed -r "s/##(.*)##/($namsg)/" | sed -r "s/\[.*\]//" )
        else
            format=$( echo $format | sed -r "s/##(.*)##/(not available)/" | sed -r "s/\[.*\]//" )
        fi
        printf "$format\n" "$sysf"
    else
        # non empty value: strip delimiters from format str
        format=$( echo $format | sed -r "s/##(.*)##/\1/" )
        printf "$format\n" "$sysf" "$val"
    fi

    return 0
}

printparm_i915 () { # formatted output of sysfile - i915 kernel module variant
    # $1: sysfile, $2: alternative
    local sysf val b

    # Check if sysfile or alternative exist
    if [ -f $1 ]; then
        sysf=$1
    elif [ -f $2 ]; then
        sysf=$2
    else
        sysf=""
    fi

    if [ -n "$sysf" ]; then
        # sysfile exists, get content
        val=$(cat $sysf 2> /dev/null)
        if [ $? = 0 ]; then
            # sysfile was readable, output content
            printf "%-44s = %2d " $sysf $val
            # Explain content
            if [ "$val" = "-1" ]; then
                echo "(use per-chip default)"
            else
                echo -n "("
                if [ $(( $val & 1 )) -ne 0 ]; then
                    echo -n "enabled"
                else
                    echo -n "disabled"
                fi
                [ $(( $val & 2 )) -ne 0 ] && echo -n " + deep"
                [ $(( $val & 4 )) -ne 0 ] && echo -n " + deepest"
                echo ")"
            fi
        else
            # sysfile was not readable
            printf "%-44s = (not available)\n" $sysf
        fi
    else
        # Neither sysfile nor alternative exists
        printf "%-44s = (not available)\n" $1
    fi

    return 0
}

print_tpacpi_thresholds () { # formatted output of ThinkPad charging thresholds
    # - tpcapi-bat variant
    # $1: BAT0/BAT1; $2: bat # = 1/2
    local start_thresh stop_thresh force

    read_tpacpi_threshold ST $2
    start_thresh=$?
    if [ $start_thresh -ne 255 ]; then
        [ $start_thresh -eq 0 ] && start_thresh=96
        printf "%-59s = %6d [%%]\n" "tpacpi-bat.${1}.startThreshold" $start_thresh
    else
        printf "%-59s = (not available)\n" "tpacpi-bat.${1}.startThreshold"
    fi

    read_tpacpi_threshold SP $2
    stop_thresh=$?
    if [ $stop_thresh -ne 255 ]; then
        [ $stop_thresh -eq  0 ] && stop_thresh=100
        printf "%-59s = %6d [%%]\n" "tpacpi-bat.${1}.stopThreshold" $stop_thresh
    else
        printf "%-59s = (not available)\n" "tpacpi-bat.${1}.stopThreshold"
    fi

    get_force_discharge $2; force=$?
    if [ $force -ne 2 ]; then
        printf "%-59s = %6d\n" "tpacpi-bat.${1}.forceDischarge" "$force"
    else
        printf "%-59s = %s\n" "tpacpi-bat.${1}.forceDischarge" "(not available)"
    fi

    return 0
}

check_ata_errors () { # check kernel log for ata errors
    # (possibly) caused by SATA_LINKPWR_ON_AC/BAT != max_performance
    # stdout: error count

    if wordinlist $SATA_LINKPWR_ON_BAT "min_power medium_power" || \
       wordinlist $SATA_LINKPWR_ON_AC "min_power medium_power"; then
        # config values != max_performance exist --> check kernel log

        # count matching error lines
        echo $( dmesg | egrep -c "ata[0-9]+: SError: {.*CommWake.*}" 2> /dev/null )
    else
        # no values in question configured 
        echo "0"
    fi

    return 0
}

# @stdout glob_files ( glob_pattern, dir[, dir...] )
#
#  Nested for-loop that applies a glob expression to several directories
#  (or file path prefixes) and prints matching file paths to stdout.
#
glob_files () {
    [ -n "${1-}" ] || return 64
    local glob_pattern file_iter

    glob_pattern="${1}"

    while shift && [ $# -gt 0 ]; do
        for file_iter in ${1}${glob_pattern}; do
            [ ! -f "${file_iter}" ] || echo "${file_iter}"
        done
    done
}

read_args () { # read command line arguments
    for a in $*; do
        case $a in
            "-b"|"--battery")
                show_all=0
                show_bat=1
                needs_root_priv=1
                ;;

            "-c"|"--config")
                show_all=0
                show_conf=1
                : ${needs_root_priv:=0}
                ;;

            "-r"|"--rfkill")
                show_all=0
                show_rfkill=1
                : ${needs_root_priv:=0}
                ;;

            "-t"|"--temp")
                show_all=0
                show_temp=1
                : ${needs_root_priv:=0}
                ;;

            "-w"|"--warn")
                show_all=0
                show_warn=1
                : ${needs_root_priv:=0}
                ;;

            "-T"|"--trace")
                show_all=0
                show_trace=1
                needs_root_priv=1
                ;;

            *)
                echo "Usage: tlp-stat [-b|--battery|-c|--config|-r|--rfkill|-t|--temp|-T|--trace]"
                exit 1
                ;;
        esac
    done
}

# --- Locate and source libraries

for libdir in $LIBDIRS; do [ -d $libdir ] && break; done
if [ ! -d $libdir ]; then
    echo "Error: missing library directory ($LIBDIRS)." 1>&2
    exit 1
fi

for lib in $LIBS; do
    if [ ! -f $libdir/$lib ]; then
        echo "Error: missing function library \'$libdir/$lib\'." 1>&2
        exit 1
    fi
    . $libdir/$lib
done

# --- MAIN

add_sbin2path

read_args $*
: ${needs_root_priv:=1}

# check for and read conffile
read_defaults
conf_present=$?

# check prereqisites
if [ "$needs_root_priv" = "1" ]; then
    check_root
    load_modules
    check_tpacpi
    check_tpsmapi
fi

echo "--- TLP $TLPVER --------------------------------------------"
echo

# --- show configuration
if [ "$show_conf" = "1" ] || [ "$show_all" = "1" ]; then
    if [ $conf_present -eq 0 ]; then
        echo "+++ Configured Settings: $CONFFILE"
        egrep -v '^#|^\s*$' $CONFFILE
        echo
    else
        echo "Warning: config file $CONFFILE not present." 1>&2
        echo
    fi
fi

if [ "$show_all" = "1" ]; then
    # --- show system info
    echo "+++ System Info"

    echo "System         = $( read_dmi sys_vendor product_version product_name )"
    echo "BIOS           = $( read_dmi bios_version )"

    # --- show release & kernel info
    cmd_exists $LSBREL && echo "Release        = $($LSBREL -d -s)"
    echo "Kernel         = $(uname -r -m)"
    printparm "%-14s = %s" /proc/cmdline
    echo

    # --- show TLP status
    echo "+++ System Status"
    if [ "$TLP_ENABLE" = "1" ]; then
        echo "TLP power save = enabled"
    else
        echo "TLP power save = not enabled"
    fi

    # -- show warning if l-m-t detected
    check_laptop_mode_tools

    # --- show power source
    if get_power_state; then
        echo "power source   = ac"
    else
        echo "power source   = battery"
    fi
    echo

    # --- show cpu info
    echo "+++ Processor"
    sed -rn 's/model name[ \t]+: (.+)/CPU Model      = \1/p' /proc/cpuinfo | head -1
    echo

    for cpuf in /sys/devices/system/cpu/cpu*/cpufreq; do
        if [ -f $cpuf/scaling_driver ]; then
            printparm "%-54s = ##%s##" $cpuf/scaling_driver
            printparm "%-54s = ##%s##" $cpuf/scaling_governor

            if [ -f $cpuf/scaling_min_freq ]; then
                printf "%-54s = %8d [kHz]\n" $cpuf/scaling_min_freq $(cat $cpuf/scaling_min_freq)
            fi

            if [ -f $cpuf/scaling_max_freq ]; then
                printf "%-54s = %8d [kHz]\n" $cpuf/scaling_max_freq $(cat $cpuf/scaling_max_freq)
            fi

            if [ -f $cpuf/scaling_available_frequencies ]; then
                printf "%s = " $cpuf/scaling_available_frequencies
                for freq in $(cat $cpuf/scaling_available_frequencies); do
                    printf "%s " $freq
                done
                printf "[kHz]\n"
            fi
            printf "\n"
        fi
    done

    check_intel_pstate

    if [ $intel_pstate -eq 1 ]; then
        printparm "%-54s = ##%d##" $CPU_MIN_PERF_PCT
        printparm "%-54s = ##%d##" $CPU_MAX_PERF_PCT
        printparm "%-54s = ##%d##" $CPU_TURBO_PSTATE
    elif [ -f $CPU_BOOST_ALL_CTRL ]; then
        get_sysval $CPU_BOOST_ALL_CTRL; boost=$?

        # simple test for attribute "w" doesn't work, so actually write
        if ( echo "$boost" > $CPU_BOOST_ALL_CTRL ) 2> /dev/null; then
            printparm "%-54s = ##%d##" $CPU_BOOST_ALL_CTRL
        else
            printparm "%-54s = ##%d## (cpu not supported)" $CPU_BOOST_ALL_CTRL
        fi
    else
         printparm "%-54s = (not available)" $CPU_BOOST_ALL_CTRL
    fi


    for pool in mc smp smt; do
        sdev="/sys/devices/system/cpu/sched_${pool}_power_savings"
        [ -f $sdev ] && printparm "%-54s = ##%d##" $sdev
    done

    # --- show nmi watchdog
    printparm "%-54s = ##%d##" $NMIWD
    echo

    # --- show voltages
    echo "+++ Undervolting"
    phc_avail=0
    for cpuf in /sys/devices/system/cpu/cpu*/cpufreq; do
        if [ -f $cpuf/phc_controls ]; then
            phc_avail=1
            printparm "%-58s = ##%s##" $cpuf/phc_controls
            printparm "%-58s = ##%s##" $cpuf/phc_default_controls
            echo
        fi
    done
    if [ $phc_avail = 0 ]; then
        echo "PHC kernel not available."
        echo
    fi

fi # show_all

if [ "$show_temp" = "1" ] || [ "$show_all" = "1" ]; then
    # --- show temperatures
    echo "+++ Temperatures"
    if [ -f $IBMTHERMAL ]; then
        # use thinkpad-specific sysfile
        echo "$IBMTHERMAL = $(cat $IBMTHERMAL | cut -f2) [°C]"
    else
        # use sensors
        cmax=0
        for sens in $(glob_files '/temp?*_input' $CORETEMP_DIRS); do
            if grep -q -- 'Physical' ${sens%input}label 2>/dev/null; then
                # package info is available -> ignore remaining sensors
                read -r cmax < $sens
                break
            else
                # core info -> find max value
                read -r ctemp < $sens && [ $ctemp -gt $cmax ] && cmax=$ctemp
            fi
        done
        if [ $cmax -gt 0 ]; then
            printf "CPU temp               = %5d [°C]\n" $(( $cmax / 1000 ))
        fi

    fi

    # --- show fan speed
    if is_thinkpad && [ -f $IBMFAN ]; then
        # use thinkpad-specific sysfile
        awk '$1 ~ /speed:/ { printf "'$IBMFAN'     = %5d [/min]\n", $2 }' $IBMFAN
    else
        # use hwmon
        have_any_fan=
        for fan in $(glob_files '/fan?*_input' $HWMONFAN_DIRS); do
            if read -r fan_speed < $fan; then
                fan_name="${fan##*/}"; fan_name="${fan_name%_input}"
                have_any_fan=y

                printf "Fan speed (%s)       = %5d [/min]\n" \
                    ${fan_name} ${fan_speed}
            fi
        done
        if [ -z "${have_any_fan}" ]; then
            printf "Fan speed              = (not available)\n"
        fi
    fi
    echo

fi # show_temp

if [ "$show_all" = "1" ]; then
    # --- show laptop-mode, dirty buffers params
    echo "+++ File System"
    printparm "%-38s = ##%5d##" /proc/sys/vm/laptop_mode
    printparm "%-38s = ##%5d##" /proc/sys/vm/dirty_writeback_centisecs
    printparm "%-38s = ##%5d##" /proc/sys/vm/dirty_expire_centisecs
    printparm "%-38s = ##%5d##" /proc/sys/vm/dirty_ratio
    printparm "%-38s = ##%5d##" /proc/sys/vm/dirty_background_ratio
    printparm "%-38s = ##%5d##" /proc/sys/fs/xfs/age_buffer_centisecs
    printparm "%-38s = ##%5d##" /proc/sys/fs/xfs/xfssyncd_centisecs
    printparm "%-38s = ##%5d##" /proc/sys/fs/xfs/xfsbufd_centisecs
    echo

    # --- show disk info form hdparm
    echo "+++ Storage Devices"
    : ${DISK_DEVICES:=${DEFAULT_DISK_DEVICES}}
    for dev in $DISK_DEVICES; do # iterate all devices
        get_disk_dev $dev

        if [ -b /dev/$disk_dev ]; then
            get_disk_state $disk_dev
            check_disk_hdparm_cap $disk_dev
            if [ $? = 0 ]; then
                echo "/dev/$disk_dev:"

                if [ -n "$disk_id" ]; then
                    echo "          Disk ID   = $disk_id"
                fi

                echo -n "          Model     = "
                echo_disk_model $disk_dev

                echo -n "          Firmware  = "
                echo_disk_firmware $disk_dev

                get_disk_apm_level $disk_dev
                apm=$?
                echo -n "          APM Level = "
                case $apm in
                    0|255) echo "none/disabled" ;;
                    *)     echo $apm ;;
                esac

                echo "          Status    = $disk_state"

                get_disk_trim_capability $disk_dev
                trim=$?
                case $trim in
                    0) echo "          TRIM      = not supported" ;;
                    1) echo "          TRIM      = supported" ;;
                esac

                [ -f /sys/block/$disk_dev/queue/scheduler ] && \
                    echo "          Scheduler = $(cat /sys/block/$disk_dev/queue/scheduler | sed -r 's/.*\[(.*)\].*/\1/')"

                if cmd_exists $SMARTCTL ; then
                    # --- show SMART data
                    echo
                    echo "        SMART info:"
                    $SMARTCTL -A /dev/$disk_dev | grep -v '<==' | \
                      awk -F ' ' '$2 ~ /Start_Stop_Count|Load_Cycle_Count|Reallocated_Sector_Ct|Used_Rsvd_Blk_Cnt_Chip|Used_Rsvd_Blk_Cnt_Tot/ \
                                        { printf "          %3d %-25s = %8d \n", $1, $2, $10 } ; \
                                  $2 ~ /Power_On_Hours/ \
                                        { printf "          %3d %-25s = %8d %s\n", $1, $2, $10, "[h]" } ; \
                                  $2 ~ /Temperature_Celsius/ \
                                        { printf "          %3d %-25s = %8d %s %s %s %s\n", $1, $2, $10, $11, $12, $13, "[°C]" } ; \
                                  $2 ~ /Airflow_Temperature_Cel/ \
                                        { printf "          %3d %-25s = %8d %s\n", $1, $2, $10, "[°C]" } ; \
                                  $2 ~ /Host_Writes/ \
                                        { printf "          %3d %-25s = %8.3f %s\n", $1, $2, $10 / 32768.0, "[TB]" } ; \
                                  $2 ~ /Total_LBAs_Written/ \
                                        { printf "          %3d %-25s = %8.3f %s\n", $1, $2, $10 / 2147483648.0, "[TB]" } ; \
                                  $2 ~ /Available_Reservd_Space|Media_Wearout_Indicator|Wear_Leveling_Count/ \
                                        { printf "          %3d %-25s = %8d %s\n", $1, $2, $4, "[%]" }'
                fi
                echo

                # restore standby state
                [ "$disk_state" = "standby" ] && spindown_disk $disk_dev
            fi
        fi
    done
    echo

    # --- show sata alpm mode
    echo "+++ SATA Aggressive Link Power Management"
    cnt=0
    for i in /sys/class/scsi_host/host* ; do
        if [ -f $i/link_power_management_policy ]; then
            printparm "%-56s = ##%s##" $i/link_power_management_policy
            cnt=$((cnt+1))
        fi
    done
    if [ $cnt = 0 ]; then
        echo "No AHCI-enabled host controller detected."
    fi
    echo

    # --- show pcie aspm state
    echo "+++ PCIe Active State Power Management"
    if [ -f $ASPM ]; then
        pol=$(cat $ASPM | sed -r 's/.*\[(.*)\].*/\1/')
        echo "$pol" > $ASPM 2> /dev/null
        if [ $? = 0 ]; then
            echo "$ASPM = $pol"
        else
            echo "$ASPM = $pol (using bios preferences)"
        fi
    else
        echo "$ASPM = (not available)"
    fi
    echo

    # --- show i915 power mgmt
    if [ -d $I915D ]; then
        echo "+++ Intel Graphics"
        printparm_i915 $I915D/powersave
        printparm_i915 $I915D/enable_rc6 $I915D/i915_enable_rc6
        printparm_i915 $I915D/enable_fbc $I915D/i915_enable_fbc
        printparm_i915 $I915D/lvds_downclock
        printparm_i915 $I915D/semaphores
        echo
    fi

    # --- show radeon power profile or dpm state
    if [ -d $RADD ]; then
        for card in /sys/class/drm/card[0-9]/device ; do
            if [ -f $card/power_dpm_state ] && [ -f $card/power_dpm_force_performance_level ]; then
                # Use new radeon dpm state
                echo "+++ Radeon Graphics"
                printparm "%-25s = ##%s##" $card/power_dpm_state
                printparm "%-25s = ##%s##" $card/power_dpm_force_performance_level
                echo
                break

            elif [ -f $card/power_method ] && [ -f $card/power_profile ]; then
                # Use old radeon power profile
                echo "+++ Radeon Graphics"
                printparm "%-25s = ##%s##" $card/power_method
                printparm "%-25s = ##%s##" $card/power_profile
                echo
                break
            fi
        done
    fi
fi # show_all

if [ "$show_rfkill" = "1" ] || [ "$show_all" = "1" ]; then
    echo "+++ Wireless"
    # --- show rfkill state
    for i in bluetooth wifi wwan; do
        get_devc $i
        get_devs $i
        echo_device_state $i $devs
    done

    # --- show bluetooth
    get_bluetooth_ifaces
    for iface in $bifaces; do
        if [ -n "$iface" ]; then
            get_bluetooth_driver $iface
            echo
            echo "$iface($bluetoothdrv):"
            echo -n "in use           = "
            if bluetooth_in_use $iface; then
                echo "Y"
            else
                echo "N"
            fi
        fi
    done

    # --- show wifi power mode
    get_wifi_ifaces
    for iface in $wifaces; do
        if [ -n "$iface" ]; then
            wifipm=""

            if [ "$X_DONT_USE_IW" != "1" ] && cmd_exists $IW; then
                # try with iw first
                wifipm=$($IW dev $iface get power_save 2> /dev/null | \
                    grep "Power save" | \
                    sed -r 's/.*Power save: (on|off).*/\1/')
            fi

            if cmd_exists $IWC; then
                if [ -z "$wifipm" ]; then
                    # iw did not succeed or iw not installed -> try with iwconfig
                    wifipm=$($IWC $iface 2> /dev/null | \
                        grep "Power Management" | \
                        sed -r 's/.*Power Management:(on|off).*/\1/')
                fi
            fi

            get_wifi_driver $iface
            echo
            echo "$iface($wifidrv):"
            echo -n "power management = "
            case $wifipm in
                on|off) echo "$wifipm" ;;
                *)      echo "unknown" ;;
            esac
            echo -n "in use           = "
            if wifi_in_use $iface; then
                echo "Y"
            else
                echo "N"
            fi
        fi
    done
    [ -n "$wifaces" ] && echo
fi # show_rfkill

if [ "$show_all" = "1" ]; then
    # --- show sound power mode
    echo "+++ Audio"
    if [ -d /sys/module/snd_hda_intel ]; then
        printparm "%-58s = ##%s##" /sys/module/snd_hda_intel/parameters/power_save
        printparm "%-58s = ##%s##" /sys/module/snd_hda_intel/parameters/power_save_controller
    fi
    if [ -d /sys/module/snd_ac97_codec ]; then
        printparm "%s = ##%s##" /sys/module/snd_ac97_codec/parameters/power_save
    fi
    echo

fi # show_all

if [ "$show_bat" = "1" ] || [ "$show_all" = "1" ]; then
    # --- show battery info & charge thresholds

    # --- show availability of ThinkPad battery functions
    if is_thinkpad; then
        echo "+++ ThinkPad Extended Battery Functions"
        echo -n "tp-smapi   = "
        case $tpsmapi in
            0)   echo "active" ;;
            2)   echo "inactive (kernel module 'tp_smapi' load error)" ;;
            127) echo "inactive (kernel module 'tp_smapi' not installed)" ;;
            *)   echo "unknown status"
        esac

        echo -n "tpacpi-bat = "
        case $tpacpi in
            0)   echo "active" ;;
            2)   echo "inactive (kernel module 'acpi_call' load error)" ;;
            4)   echo "inactive (disabled by user configuration)" ;;
            127) echo "inactive (kernel module 'acpi_call' not installed)" ;;
            255) echo "inactive (unsupported hardware)" ;;
        esac
        echo
    fi

    if [ $tpsmapi -eq 0 ]; then
        # it's a ThinkPad with tp-smapi

        for batd in $SMAPIDIR/BAT[01]; do
            if [ -d $batd ]; then
                batt=${batd##/*/}

                if check_tp_battery $batt; then # battery is present
                    case $bat_idx in
                        1) echo "+++ ThinkPad Battery Status: $batt (Main / Internal)" ;;
                        2) echo "+++ ThinkPad Battery Status: $batt (Ultrabay / Slice / Replaceable)" ;;
                        0) echo "+++ ThinkPad Battery Status: $batt" ;;
                    esac

                    printparm "%-59s = ##%s##" $batd/manufacturer
                    printparm "%-59s = ##%s##" $batd/model
                    printparm "%-59s = ##%s##" $batd/manufacture_date
                    printparm "%-59s = ##%s##" $batd/first_use_date
                    printparm "%-59s = ##%6d##" $batd/cycle_count
                    printparm "%-59s = ##%6d## [mWh]" $batd/design_capacity
                    printparm "%-59s = ##%6d## [mWh]" $batd/last_full_capacity
                    printparm "%-59s = ##%6d## [mWh]" $batd/remaining_capacity
                    printparm "%-59s = ##%6d## [%%]" $batd/remaining_percent
                    printparm "%-59s = ##%6s## [min]" $batd/remaining_running_time_now
                    printparm "%-59s = ##%6s## [min]" $batd/remaining_charging_time
                    printparm "%-59s = ##%6d## [mW]" $batd/power_now
                    printparm "%-59s = ##%6d## [mW]" $batd/power_avg
                    echo

                    if [ $tpacpi -eq 0 ]; then
                        # --- show ThinkPad charge thresholds via tpacpi-bat
                        print_tpacpi_thresholds $batt $bat_idx
                    else
                        # show thresholds via tp-smapi
                        printparm "%-59s = ##%6d## [%%]" $batd/start_charge_thresh
                        printparm "%-59s = ##%6d## [%%]" $batd/stop_charge_thresh
                        printparm "%-59s = ##%6d##" $batd/force_discharge
                    fi
                    echo
                fi
            fi
        done
    elif [ -d $ACPIBATDIR ]; then
        # --- show ACPI data

        for batd in $ACPIBATDIR/*; do
            batt=${batd##/*/}

            if check_tp_battery $batt; then # battery is present
                if [ $tpacpi -eq 0 ]; then
                    # it's a ThinkPad with tpacpi-bat only
                    case $bat_idx in
                        1) echo "+++ ThinkPad Battery Status: $batt (Main / Internal)" ;;
                        2) echo "+++ ThinkPad Battery Status: $batt (Ultrabay / Slice / Replaceable)" ;;
                        0) echo "+++ ThinkPad Battery Status: $batt" ;;
                    esac
                else
                   # it's a ThinkPad with neither tp-smapi nor tpacpi-bat 
                    echo "+++ Battery Status"
                fi
            elif [ -d $batd ] \
                 && [ "$(cat $batd/type)" = "Battery" ] \
                 && [ "$(cat $batd/present)" = "1" ]; then
                    # it's some other laptop model or brand
                    echo "+++ Battery Status"
            else
                batt="" # power supply is not a battery
            fi

            if [ -n "$batt" ]; then
                printparm "%-59s = ##%s##" $batd/manufacturer
                printparm "%-59s = ##%s##" $batd/model_name

                cc=$(cat $batd/cycle_count 2> /dev/null)
                if [ $? -eq 0 ] && [ -n "$cc" ] && [ $cc -gt 0 ]; then
                    printf "%-59s = %6d\n" $batd/cycle_count $cc
                else
                    printf "%-59s = (not supported)\n" $batd/cycle_count
                fi

                if [ -f $batd/energy_full ]; then
                    printparm "%-59s = ##%6d## [mWh]" $batd/energy_full_design "" 000
                    printparm "%-59s = ##%6d## [mWh]" $batd/energy_full "" 000
                    printparm "%-59s = ##%6d## [mWh]" $batd/energy_now "" 000
                    printparm "%-59s = ##%6d## [mW]" $batd/power_now "" 000
                elif [ -f $batd/charge_full ]; then
                    printparm "%-59s = ##%6d## [mAh]" $batd/charge_full_design "" 000
                    printparm "%-59s = ##%6d## [mAh]" $batd/charge_full "" 000
                    printparm "%-59s = ##%6d## [mAh]" $batd/charge_now "" 000
                    printparm "%-59s = ##%6d## [mA]" $batd/current_now "" 000
                fi
                printparm "%-59s = ##%s##" $batd/status
                echo

                if [ $tpacpi -eq 0 ]; then
                    # --- show ThinkPad charge thresholds via tpacpi-bat
                    print_tpacpi_thresholds $batt $bat_idx
                    echo
                fi # if $tpcacpi
            fi # if $batt
        done # $batd

    fi # if /sys/class/power_supply

fi # show_bat

if [ "$show_all" = "1" ]; then
    # -- show runtime pm
    echo "+++ Runtime Power Management"
    doall=${RUNTIME_PM_ALL:-0}

    if cmd_exists $TLPPCI; then
        $TLPPCI
    else
        echo "Error: missing subcommand $TLPPCI." 1>&2
    fi
    echo

    # -- show usb autosuspend
    echo "+++ USB"
    if [ "$USB_AUTOSUSPEND" = "1" ]; then
        echo "tlp usb autosuspend = enabled"
    else
        echo "tlp usb autosuspend = not enabled"
    fi
    echo "tlp usb blacklist   = ${USB_BLACKLIST:=(not configured)}"
    echo

    if cmd_exists $TLPUSB; then
        $TLPUSB
    else
        echo "Error: missing subcommand $TLPUSB." 1>&2
    fi
    echo

    # -- show suggestions
    suout=""

    if is_thinkpad; then
        # Add ThinkPad specific suggestions
        model="$( read_dmi product_version )"
        model=${model#ThinkPad }
        model=${model#Edge }

        case $model in
            X240*|T?40*|W540|L?40|E?4?|S?40|X230*|T?3?*|W530|L?30|E?3?*|S?3?*)
                [ $tpacpi -eq 127 ]  && suout="${suout}Install acpi-call kernel module for ThinkPad advanced battery functions\n"
                ;;

            X220*|T420*|T520|W520)
                [ $tpacpi -eq 127 ]  && suout="${suout}Install acpi-call kernel module for ThinkPad advanced battery functions\n"
                [ $tpsmapi -eq 127 ] && suout="${suout}Install tp-smapi kernel modules for ThinkPad advanced battery functions\n"
                ;;

            SL?00) ;;

            *) [ $tpsmapi -eq 127 ]  && suout="${suout}Install tp-smapi kernel modules for ThinkPad advanced battery functions\n"
                ;;
        esac

    fi # if ThinkPad

    # Add other suggestions
    cmd_exists ethtool || suout="${suout}Install ethtool to disable Wake On LAN (WOL)\n"
    cmd_exists smartctl || suout="${suout}Install smartmontools for disk drive health info\n"

    if [ -n "$suout" ]; then
        echo "+++ Suggestions"
        printf "$suout" | sed -r 's/^/\* /'
        echo
    fi

fi # show_all

if [ "$show_warn" = "1" ]; then
    # --- show warnings

    # ata errors (possibly) caused by SATA_LINKPWR_ON_AC/BAT != max_performance
    ecnt=$( check_ata_errors )
    if [ $ecnt -ne 0 ]; then
        echo "+++ Warnings"
        printf "* Kernel log shows ata errors (%d) possibly caused by the configuration: " $ecnt
        printf "SATA_LINKPWR_ON_AC/BAT=min_power or medium_power\n" 
        printf "  Consider using medium_power or max_performance instead.\n"
        printf "  Details:\n"
        dmesg | egrep -A 5 "ata[0-9]+: SError: { .*CommWake }"
        echo
    else
        echo "No warnings detected."
        echo ""
    fi

fi # show_warn

if [ "$show_trace" = "1" ]; then
    # --- show debug log

    # check for systemd journal
    jdone=0
    if cmd_exists $JOURNALCTL; then
        # retrieve trace output from journal
        $JOURNALCTL -p debug --no-pager SYSLOG_IDENTIFIER=tlp 2> /dev/null
        # check result -- rc=1 if journald has no data available
        [ $? -eq 0 ] && jdone=1
    fi

    if [ "$jdone" = "0"  ]; then
        # no journald data available --> retrieve trace output from logfile
        if [ -f $DEBUGLOG ]; then
            grep "tlp\[" $DEBUGLOG
        else
            echo "Error: $DEBUGLOG does not exist." 1>&2
            echo 1>&2
            echo "Solution: create an rsyslog conffile /etc/rsyslog.d/90-debug.conf with the following contents" 1>&2
            echo " *.=debug;\\" 1>&2
            echo " mail,authpriv,cron.none;\\" 1>&2
            echo " local0,local1,local3,local4,\\" 1>&2
            echo " local5,local6,local7.none    -/var/log/debug" 1>&2
            echo "and restart the rsyslog daemon." 1>&2
            echo 1>&2
        fi
    fi
fi # show_trace

exit 0
